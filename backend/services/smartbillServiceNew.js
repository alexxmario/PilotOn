const axios = require('axios');

class SmartBillService {
  constructor() {
    // Based on api.smartbill.ro documentation - this is the modern API
    this.baseURL = 'https://api.smartbill.ro';
    this.token = process.env.SMARTBILL_TOKEN;
  }

  // Generate authorization header - Bearer token as shown in the documentation
  getAuthHeader() {
    if (!this.token) {
      throw new Error('SmartBill token not configured. Please set SMARTBILL_TOKEN in environment variables.');
    }
    
    console.log('SmartBill token being used:', this.token.substring(0, 10) + '...');
    return `Bearer ${this.token}`;
  }

  // Test SmartBill connection
  async testConnection() {
    try {
      const response = await axios.get(
        `${this.baseURL}/companies`,
        {
          headers: {
            'Authorization': this.getAuthHeader(),
            'Accept': 'application/json'
          },
          timeout: 10000
        }
      );
      return { success: true, data: response.data };
    } catch (error) {
      console.error('SmartBill connection test failed:', error.response?.data || error.message);
      return { 
        success: false, 
        error: error.response?.data || error.message
      };
    }
  }

  // Create invoice in SmartBill using modern API
  async createInvoice(orderData) {
    try {
      // Validate configuration first
      this.validateConfig();
      
      const invoiceData = this.formatInvoiceData(orderData);
      
      console.log('SmartBill invoice data:', JSON.stringify(invoiceData, null, 2));
      console.log('SmartBill auth header:', this.getAuthHeader());
      
      const response = await axios.post(
        `${this.baseURL}/invoice`,
        invoiceData,
        {
          headers: {
            'Authorization': this.getAuthHeader(),
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          timeout: 30000
        }
      );

      return {
        success: true,
        invoiceId: response.data.id || response.data.number,
        invoiceNumber: response.data.number || `${response.data.series}${response.data.number}`,
        data: response.data
      };
    } catch (error) {
      console.error('SmartBill invoice creation failed:', error.response?.data || error.message);
      console.error('Request URL:', `${this.baseURL}/invoice`);
      console.error('Request headers:', {
        'Authorization': this.getAuthHeader(),
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      });
      return {
        success: false,
        error: error.response?.data?.message || error.message
      };
    }
  }

  // Format order data for modern SmartBill API
  formatInvoiceData(orderData) {
    return {
      cif: process.env.SMARTBILL_CIF,
      client: {
        name: orderData.guestName,
        email: orderData.guestEmail,
        phone: orderData.guestPhone,
        address: orderData.shippingAddress.street,
        city: orderData.shippingAddress.city,
        county: orderData.shippingAddress.county,
        country: orderData.shippingAddress.country || 'Romania',
        postalCode: orderData.shippingAddress.postalCode
      },
      issueDate: new Date().toISOString().split('T')[0],
      dueDate: this.getDueDate(7),
      series: process.env.SMARTBILL_SERIES || 'FACT',
      number: null, // Auto-generated by SmartBill
      items: this.formatProducts(orderData.items, orderData.shippingCost),
      currency: 'RON',
      notes: orderData.notes || `Comanda #${orderData.orderNumber}`
    };
  }

  // Format products for modern SmartBill API
  formatProducts(items, shippingCost = 0) {
    const products = items.map(item => ({
      name: item.name,
      description: item.name,
      quantity: item.quantity,
      price: item.price,
      unit: 'buc',
      vatRate: 19
    }));

    // Add shipping if applicable
    if (shippingCost && shippingCost > 0) {
      products.push({
        name: 'Transport',
        description: 'Servicii de transport',
        quantity: 1,
        price: shippingCost,
        unit: 'buc',
        vatRate: 19
      });
    }

    return products;
  }

  // Get payment URL for online payments (if supported by modern API)
  async getPaymentURL(invoiceData, returnURL, cancelURL) {
    try {
      const paymentData = {
        invoiceId: invoiceData.invoiceId,
        amount: invoiceData.total,
        currency: 'RON',
        returnUrl: returnURL,
        cancelUrl: cancelURL,
        description: `Plata factura ${invoiceData.invoiceNumber} - PilotOn`
      };

      const response = await axios.post(
        `${this.baseURL}/payment/link`,
        paymentData,
        {
          headers: {
            'Authorization': this.getAuthHeader(),
            'Content-Type': 'application/json'
          }
        }
      );

      return {
        success: true,
        paymentURL: response.data.url,
        paymentId: response.data.id
      };
    } catch (error) {
      console.error('SmartBill payment URL generation failed:', error.response?.data || error.message);
      return {
        success: false,
        error: error.response?.data?.message || error.message
      };
    }
  }

  // Check payment status
  async checkPaymentStatus(paymentId) {
    try {
      const response = await axios.get(
        `${this.baseURL}/payment/${paymentId}/status`,
        {
          headers: {
            'Authorization': this.getAuthHeader()
          }
        }
      );

      return {
        success: true,
        status: response.data.status,
        data: response.data
      };
    } catch (error) {
      console.error('SmartBill payment status check failed:', error.response?.data || error.message);
      return {
        success: false,
        error: error.response?.data?.message || error.message
      };
    }
  }

  // Get invoice PDF
  async getInvoicePDF(invoiceId) {
    try {
      const response = await axios.get(
        `${this.baseURL}/invoice/${invoiceId}/pdf`,
        {
          headers: {
            'Authorization': this.getAuthHeader(),
            'Accept': 'application/pdf'
          },
          responseType: 'arraybuffer'
        }
      );

      return {
        success: true,
        pdf: response.data
      };
    } catch (error) {
      console.error('SmartBill PDF retrieval failed:', error.response?.data || error.message);
      return {
        success: false,
        error: error.response?.data?.message || error.message
      };
    }
  }

  // Get due date (days from now)
  getDueDate(days) {
    const date = new Date();
    date.setDate(date.getDate() + days);
    return date.toISOString().split('T')[0];
  }

  // Validate environment variables
  validateConfig() {
    const required = [
      'SMARTBILL_TOKEN',
      'SMARTBILL_CIF'
    ];

    const missing = required.filter(key => !process.env[key]);
    
    if (missing.length > 0) {
      throw new Error(`Missing SmartBill configuration: ${missing.join(', ')}. Please check your .env file.`);
    }
  }
}

module.exports = new SmartBillService();